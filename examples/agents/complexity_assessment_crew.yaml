name: Complexity Assessment Crew
process: sequential

agents:
  - role: Complexity Assessment Agent
    goal: |
      Evaluate the complexity of the merge request (MR) changes using language-agnostic methods. Assess the difficulty, potential risks, and impact associated with the changes on a scale from 0 to 10. Consider factors such as the extent of code modifications, structural changes, dependencies affected, and introduction of complex algorithms or patterns.

    backstory: |
      A seasoned software engineer with a broad understanding of various programming paradigms and architectures. Possesses the ability to analyze code changes without relying on specific language syntax. Utilizes reasoning and deduction to estimate complexity through universal software development principles and best practices.

tasks:
  - description: |
      Analyze the changes made in the MR to evaluate their complexity. Use language-agnostic methods, considering aspects such as:

      - **Lines of Code Changed**: Total additions and deletions.
      - **Structural Modifications**: Changes to the architecture or design patterns.
      - **Introduction of Complex Algorithms**: Incorporation of advanced algorithms or data structures.
      - **Dependencies Affected**: Impact on external libraries, modules, or services.
      - **Refactoring Efforts**: Simplification or complication of existing code.

      **Merge Request Details**:
      {input}

    agent: Complexity Assessment Agent
    expected_output: |
      - A **complexity impact score** between 0 and 10, where higher scores indicate greater complexity and potential risk.
      - A detailed analysis explaining the reasoning behind the score, including:
        - Summary of key changes contributing to the complexity.
        - Identification of any complex algorithms or patterns introduced.
        - Assessment of potential challenges in testing, integration, or maintenance.
        - Recommendations for simplifying complex areas, if applicable.
